//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a RdGen v1.07.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using JetBrains.Annotations;

using JetBrains.Core;
using JetBrains.Diagnostics;
using JetBrains.Collections;
using JetBrains.Collections.Viewable;
using JetBrains.Lifetimes;
using JetBrains.Serialization;
using JetBrains.Rd;
using JetBrains.Rd.Base;
using JetBrains.Rd.Impl;
using JetBrains.Rd.Tasks;
using JetBrains.Rd.Util;
using JetBrains.Rd.Text;


// ReSharper disable RedundantEmptyObjectCreationArgumentList
// ReSharper disable InconsistentNaming
// ReSharper disable RedundantOverflowCheckingContext


namespace ReSharperPlugin.SamplePlugin
{
  
  
  /// <summary>
  /// <p>Generated from: SamplePluginModel.kt:11</p>
  /// </summary>
  public class SamplePluginModel : RdExtBase
  {
    //fields
    //public fields
    [NotNull] public IViewableProperty<string> MyString => _MyString;
    [NotNull] public IViewableProperty<bool> MyBool => _MyBool;
    [NotNull] public IViewableProperty<ReSharperPlugin.SamplePlugin.MyEnum?> MyEnum => _MyEnum;
    [NotNull] public IViewableMap<string, string> Data => _Data;
    [NotNull] public ISignal<ReSharperPlugin.SamplePlugin.MyStructure> MyStructure => _MyStructure;
    [NotNull] public IViewableProperty<JetBrains.Rider.Model.UIAutomation.BeControl> ToolWindowContent => _ToolWindowContent;
    [NotNull] public IViewableProperty<bool> ActivateToolWindow => _ActivateToolWindow;
    
    //private fields
    [NotNull] private readonly RdProperty<string> _MyString;
    [NotNull] private readonly RdProperty<bool> _MyBool;
    [NotNull] private readonly RdProperty<ReSharperPlugin.SamplePlugin.MyEnum?> _MyEnum;
    [NotNull] private readonly RdMap<string, string> _Data;
    [NotNull] private readonly RdSignal<ReSharperPlugin.SamplePlugin.MyStructure> _MyStructure;
    [NotNull] private readonly RdProperty<JetBrains.Rider.Model.UIAutomation.BeControl> _ToolWindowContent;
    [NotNull] private readonly RdProperty<bool> _ActivateToolWindow;
    
    //primary constructor
    private SamplePluginModel(
      [NotNull] RdProperty<string> myString,
      [NotNull] RdProperty<bool> myBool,
      [NotNull] RdProperty<ReSharperPlugin.SamplePlugin.MyEnum?> myEnum,
      [NotNull] RdMap<string, string> data,
      [NotNull] RdSignal<ReSharperPlugin.SamplePlugin.MyStructure> myStructure,
      [NotNull] RdProperty<JetBrains.Rider.Model.UIAutomation.BeControl> toolWindowContent,
      [NotNull] RdProperty<bool> activateToolWindow
    )
    {
      if (myString == null) throw new ArgumentNullException("myString");
      if (myBool == null) throw new ArgumentNullException("myBool");
      if (myEnum == null) throw new ArgumentNullException("myEnum");
      if (data == null) throw new ArgumentNullException("data");
      if (myStructure == null) throw new ArgumentNullException("myStructure");
      if (toolWindowContent == null) throw new ArgumentNullException("toolWindowContent");
      if (activateToolWindow == null) throw new ArgumentNullException("activateToolWindow");
      
      _MyString = myString;
      _MyBool = myBool;
      _MyEnum = myEnum;
      _Data = data;
      _MyStructure = myStructure;
      _ToolWindowContent = toolWindowContent;
      _ActivateToolWindow = activateToolWindow;
      _MyString.OptimizeNested = true;
      _MyBool.OptimizeNested = true;
      _MyEnum.OptimizeNested = true;
      _Data.OptimizeNested = true;
      _ActivateToolWindow.OptimizeNested = true;
      _MyEnum.ValueCanBeNull = true;
      BindableChildren.Add(new KeyValuePair<string, object>("myString", _MyString));
      BindableChildren.Add(new KeyValuePair<string, object>("myBool", _MyBool));
      BindableChildren.Add(new KeyValuePair<string, object>("myEnum", _MyEnum));
      BindableChildren.Add(new KeyValuePair<string, object>("data", _Data));
      BindableChildren.Add(new KeyValuePair<string, object>("myStructure", _MyStructure));
      BindableChildren.Add(new KeyValuePair<string, object>("toolWindowContent", _ToolWindowContent));
      BindableChildren.Add(new KeyValuePair<string, object>("activateToolWindow", _ActivateToolWindow));
    }
    //secondary constructor
    internal SamplePluginModel (
    ) : this (
      new RdProperty<string>(JetBrains.Rd.Impl.Serializers.ReadString, JetBrains.Rd.Impl.Serializers.WriteString),
      new RdProperty<bool>(JetBrains.Rd.Impl.Serializers.ReadBool, JetBrains.Rd.Impl.Serializers.WriteBool),
      new RdProperty<ReSharperPlugin.SamplePlugin.MyEnum?>(ReadMyEnumNullable, WriteMyEnumNullable),
      new RdMap<string, string>(JetBrains.Rd.Impl.Serializers.ReadString, JetBrains.Rd.Impl.Serializers.WriteString, JetBrains.Rd.Impl.Serializers.ReadString, JetBrains.Rd.Impl.Serializers.WriteString),
      new RdSignal<ReSharperPlugin.SamplePlugin.MyStructure>(ReSharperPlugin.SamplePlugin.MyStructure.Read, ReSharperPlugin.SamplePlugin.MyStructure.Write),
      new RdProperty<JetBrains.Rider.Model.UIAutomation.BeControl>(JetBrains.Rider.Model.UIAutomation.BeControl.Read, JetBrains.Rider.Model.UIAutomation.BeControl.Write),
      new RdProperty<bool>(JetBrains.Rd.Impl.Serializers.ReadBool, JetBrains.Rd.Impl.Serializers.WriteBool)
    ) {}
    //deconstruct trait
    //statics
    
    public static CtxReadDelegate<ReSharperPlugin.SamplePlugin.MyEnum?> ReadMyEnumNullable = new CtxReadDelegate<ReSharperPlugin.SamplePlugin.MyEnum>(JetBrains.Rd.Impl.Serializers.ReadEnum<ReSharperPlugin.SamplePlugin.MyEnum>).NullableStruct();
    
    public static  CtxWriteDelegate<ReSharperPlugin.SamplePlugin.MyEnum?> WriteMyEnumNullable = new CtxWriteDelegate<ReSharperPlugin.SamplePlugin.MyEnum>(JetBrains.Rd.Impl.Serializers.WriteEnum<ReSharperPlugin.SamplePlugin.MyEnum>).NullableStruct();
    
    protected override long SerializationHash => -6592640456691276960L;
    
    protected override Action<ISerializers> Register => RegisterDeclaredTypesSerializers;
    public static void RegisterDeclaredTypesSerializers(ISerializers serializers)
    {
      serializers.Register(BeSampleToolWindowPanel.Read, BeSampleToolWindowPanel.Write);
      
      serializers.RegisterToplevelOnce(typeof(JetBrains.Rider.Model.IdeRoot), JetBrains.Rider.Model.IdeRoot.RegisterDeclaredTypesSerializers);
    }
    
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    public override void Print(PrettyPrinter printer)
    {
      printer.Println("SamplePluginModel (");
      using (printer.IndentCookie()) {
        printer.Print("myString = "); _MyString.PrintEx(printer); printer.Println();
        printer.Print("myBool = "); _MyBool.PrintEx(printer); printer.Println();
        printer.Print("myEnum = "); _MyEnum.PrintEx(printer); printer.Println();
        printer.Print("data = "); _Data.PrintEx(printer); printer.Println();
        printer.Print("myStructure = "); _MyStructure.PrintEx(printer); printer.Println();
        printer.Print("toolWindowContent = "); _ToolWindowContent.PrintEx(printer); printer.Println();
        printer.Print("activateToolWindow = "); _ActivateToolWindow.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  public static class SolutionSamplePluginModelEx
   {
    public static SamplePluginModel GetSamplePluginModel(this JetBrains.Rider.Model.Solution solution)
    {
      return solution.GetOrCreateExtension("samplePluginModel", () => new SamplePluginModel());
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: SamplePluginModel.kt:38</p>
  /// </summary>
  public sealed class BeSampleToolWindowPanel : JetBrains.Rider.Model.UIAutomation.BeControl
  {
    //fields
    //public fields
    [NotNull] public string Arg {get; private set;}
    
    //private fields
    //primary constructor
    private BeSampleToolWindowPanel(
      [NotNull] string arg,
      [NotNull] RdProperty<bool> enabled,
      [NotNull] RdProperty<string> controlId,
      [NotNull] RdProperty<string> tooltip,
      [NotNull] RdSignal<Unit> focus,
      [NotNull] RdProperty<JetBrains.Rider.Model.UIAutomation.ControlVisibility> visible
    ) : base (
      enabled,
      controlId,
      tooltip,
      focus,
      visible
     ) 
    {
      if (arg == null) throw new ArgumentNullException("arg");
      
      Arg = arg;
    }
    //secondary constructor
    public BeSampleToolWindowPanel (
      [NotNull] string arg
    ) : this (
      arg,
      new RdProperty<bool>(JetBrains.Rd.Impl.Serializers.ReadBool, JetBrains.Rd.Impl.Serializers.WriteBool, true),
      new RdProperty<string>(JetBrains.Rd.Impl.Serializers.ReadString, JetBrains.Rd.Impl.Serializers.WriteString, ""),
      new RdProperty<string>(ReadStringNullable, WriteStringNullable),
      new RdSignal<Unit>(JetBrains.Rd.Impl.Serializers.ReadVoid, JetBrains.Rd.Impl.Serializers.WriteVoid),
      new RdProperty<JetBrains.Rider.Model.UIAutomation.ControlVisibility>(ReadControlVisibility, WriteControlVisibility)
    ) {}
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<BeSampleToolWindowPanel> Read = (ctx, reader) => 
    {
      var _id = RdId.Read(reader);
      var enabled = RdProperty<bool>.Read(ctx, reader, JetBrains.Rd.Impl.Serializers.ReadBool, JetBrains.Rd.Impl.Serializers.WriteBool);
      var controlId = RdProperty<string>.Read(ctx, reader, JetBrains.Rd.Impl.Serializers.ReadString, JetBrains.Rd.Impl.Serializers.WriteString);
      var tooltip = RdProperty<string>.Read(ctx, reader, ReadStringNullable, WriteStringNullable);
      var focus = RdSignal<Unit>.Read(ctx, reader, JetBrains.Rd.Impl.Serializers.ReadVoid, JetBrains.Rd.Impl.Serializers.WriteVoid);
      var visible = RdProperty<JetBrains.Rider.Model.UIAutomation.ControlVisibility>.Read(ctx, reader, ReadControlVisibility, WriteControlVisibility);
      var arg = reader.ReadString();
      var _result = new BeSampleToolWindowPanel(arg, enabled, controlId, tooltip, focus, visible).WithId(_id);
      return _result;
    };
    public static CtxReadDelegate<string> ReadStringNullable = JetBrains.Rd.Impl.Serializers.ReadString.NullableClass();
    public static CtxReadDelegate<JetBrains.Rider.Model.UIAutomation.ControlVisibility> ReadControlVisibility = new CtxReadDelegate<JetBrains.Rider.Model.UIAutomation.ControlVisibility>(JetBrains.Rd.Impl.Serializers.ReadEnum<JetBrains.Rider.Model.UIAutomation.ControlVisibility>);
    
    public static new CtxWriteDelegate<BeSampleToolWindowPanel> Write = (ctx, writer, value) => 
    {
      value.RdId.Write(writer);
      RdProperty<bool>.Write(ctx, writer, value._Enabled);
      RdProperty<string>.Write(ctx, writer, value._ControlId);
      RdProperty<string>.Write(ctx, writer, value._Tooltip);
      RdSignal<Unit>.Write(ctx, writer, value._Focus);
      RdProperty<JetBrains.Rider.Model.UIAutomation.ControlVisibility>.Write(ctx, writer, value._Visible);
      writer.Write(value.Arg);
    };
    public static  CtxWriteDelegate<string> WriteStringNullable = JetBrains.Rd.Impl.Serializers.WriteString.NullableClass();
    public static  CtxWriteDelegate<JetBrains.Rider.Model.UIAutomation.ControlVisibility> WriteControlVisibility = new CtxWriteDelegate<JetBrains.Rider.Model.UIAutomation.ControlVisibility>(JetBrains.Rd.Impl.Serializers.WriteEnum<JetBrains.Rider.Model.UIAutomation.ControlVisibility>);
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    public override void Print(PrettyPrinter printer)
    {
      printer.Println("BeSampleToolWindowPanel (");
      using (printer.IndentCookie()) {
        printer.Print("arg = "); Arg.PrintEx(printer); printer.Println();
        printer.Print("enabled = "); _Enabled.PrintEx(printer); printer.Println();
        printer.Print("controlId = "); _ControlId.PrintEx(printer); printer.Println();
        printer.Print("tooltip = "); _Tooltip.PrintEx(printer); printer.Println();
        printer.Print("focus = "); _Focus.PrintEx(printer); printer.Println();
        printer.Print("visible = "); _Visible.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: SamplePluginModel.kt:13</p>
  /// </summary>
  public enum MyEnum {
    FirstValue,
    SecondValue
  }
  
  
  /// <summary>
  /// <p>Generated from: SamplePluginModel.kt:18</p>
  /// </summary>
  public sealed class MyStructure : IPrintable, IEquatable<MyStructure>
  {
    //fields
    //public fields
    [NotNull] public string ProjectFile {get; private set;}
    [NotNull] public string Target {get; private set;}
    
    //private fields
    //primary constructor
    public MyStructure(
      [NotNull] string projectFile,
      [NotNull] string target
    )
    {
      if (projectFile == null) throw new ArgumentNullException("projectFile");
      if (target == null) throw new ArgumentNullException("target");
      
      ProjectFile = projectFile;
      Target = target;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string projectFile, [NotNull] out string target)
    {
      projectFile = ProjectFile;
      target = Target;
    }
    //statics
    
    public static CtxReadDelegate<MyStructure> Read = (ctx, reader) => 
    {
      var projectFile = reader.ReadString();
      var target = reader.ReadString();
      var _result = new MyStructure(projectFile, target);
      return _result;
    };
    
    public static CtxWriteDelegate<MyStructure> Write = (ctx, writer, value) => 
    {
      writer.Write(value.ProjectFile);
      writer.Write(value.Target);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((MyStructure) obj);
    }
    public bool Equals(MyStructure other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ProjectFile == other.ProjectFile && Target == other.Target;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + ProjectFile.GetHashCode();
        hash = hash * 31 + Target.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("MyStructure (");
      using (printer.IndentCookie()) {
        printer.Print("projectFile = "); ProjectFile.PrintEx(printer); printer.Println();
        printer.Print("target = "); Target.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
}
