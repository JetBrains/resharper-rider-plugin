//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a RdGen v1.07.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using JetBrains.Annotations;

using JetBrains.Core;
using JetBrains.Diagnostics;
using JetBrains.Collections;
using JetBrains.Collections.Viewable;
using JetBrains.Lifetimes;
using JetBrains.Serialization;
using JetBrains.Rd;
using JetBrains.Rd.Base;
using JetBrains.Rd.Impl;
using JetBrains.Rd.Tasks;
using JetBrains.Rd.Util;
using JetBrains.Rd.Text;


// ReSharper disable RedundantEmptyObjectCreationArgumentList
// ReSharper disable InconsistentNaming
// ReSharper disable RedundantOverflowCheckingContext


namespace ReSharperPlugin.RdProtocol
{
  
  
  /// <summary>
  /// <p>Generated from: RdProtocolModel.kt:11</p>
  /// </summary>
  public class RdProtocolModel : RdExtBase
  {
    //fields
    //public fields
    [NotNull] public IViewableProperty<CustomType> Property => _Property;
    [NotNull] public IViewableMap<string, string> Map => _Map;
    [NotNull] public IRdEndpoint<string, string[]> Call => _Call;
    [NotNull] public IRdCall<string, string[]> Callback => _Callback;
    [NotNull] public void Sink(string value) => _Sink.Fire(value);
    [NotNull] public ISignal<string> Source => _Source;
    [NotNull] public ISignal<string> Signal => _Signal;
    
    //private fields
    [NotNull] private readonly RdProperty<CustomType> _Property;
    [NotNull] private readonly RdMap<string, string> _Map;
    [NotNull] private readonly RdCall<string, string[]> _Call;
    [NotNull] private readonly RdCall<string, string[]> _Callback;
    [NotNull] private readonly RdSignal<string> _Sink;
    [NotNull] private readonly RdSignal<string> _Source;
    [NotNull] private readonly RdSignal<string> _Signal;
    
    //primary constructor
    private RdProtocolModel(
      [NotNull] RdProperty<CustomType> property,
      [NotNull] RdMap<string, string> map,
      [NotNull] RdCall<string, string[]> call,
      [NotNull] RdCall<string, string[]> callback,
      [NotNull] RdSignal<string> sink,
      [NotNull] RdSignal<string> source,
      [NotNull] RdSignal<string> signal
    )
    {
      if (property == null) throw new ArgumentNullException("property");
      if (map == null) throw new ArgumentNullException("map");
      if (call == null) throw new ArgumentNullException("call");
      if (callback == null) throw new ArgumentNullException("callback");
      if (sink == null) throw new ArgumentNullException("sink");
      if (source == null) throw new ArgumentNullException("source");
      if (signal == null) throw new ArgumentNullException("signal");
      
      _Property = property;
      _Map = map;
      _Call = call;
      _Callback = callback;
      _Sink = sink;
      _Source = source;
      _Signal = signal;
      _Property.OptimizeNested = true;
      _Map.OptimizeNested = true;
      _Call.Async = true;
      _Callback.Async = true;
      _Sink.Async = true;
      _Source.Async = true;
      BindableChildren.Add(new KeyValuePair<string, object>("property", _Property));
      BindableChildren.Add(new KeyValuePair<string, object>("map", _Map));
      BindableChildren.Add(new KeyValuePair<string, object>("call", _Call));
      BindableChildren.Add(new KeyValuePair<string, object>("callback", _Callback));
      BindableChildren.Add(new KeyValuePair<string, object>("sink", _Sink));
      BindableChildren.Add(new KeyValuePair<string, object>("source", _Source));
      BindableChildren.Add(new KeyValuePair<string, object>("signal", _Signal));
    }
    //secondary constructor
    internal RdProtocolModel (
    ) : this (
      new RdProperty<CustomType>(CustomType.Read, CustomType.Write),
      new RdMap<string, string>(JetBrains.Rd.Impl.Serializers.ReadString, JetBrains.Rd.Impl.Serializers.WriteString, JetBrains.Rd.Impl.Serializers.ReadString, JetBrains.Rd.Impl.Serializers.WriteString),
      new RdCall<string, string[]>(JetBrains.Rd.Impl.Serializers.ReadString, JetBrains.Rd.Impl.Serializers.WriteString, ReadStringArray, WriteStringArray),
      new RdCall<string, string[]>(JetBrains.Rd.Impl.Serializers.ReadString, JetBrains.Rd.Impl.Serializers.WriteString, ReadStringArray, WriteStringArray),
      new RdSignal<string>(JetBrains.Rd.Impl.Serializers.ReadString, JetBrains.Rd.Impl.Serializers.WriteString),
      new RdSignal<string>(JetBrains.Rd.Impl.Serializers.ReadString, JetBrains.Rd.Impl.Serializers.WriteString),
      new RdSignal<string>(JetBrains.Rd.Impl.Serializers.ReadString, JetBrains.Rd.Impl.Serializers.WriteString)
    ) {}
    //deconstruct trait
    //statics
    
    public static CtxReadDelegate<string[]> ReadStringArray = JetBrains.Rd.Impl.Serializers.ReadString.Array();
    
    public static  CtxWriteDelegate<string[]> WriteStringArray = JetBrains.Rd.Impl.Serializers.WriteString.Array();
    
    protected override long SerializationHash => 4856247557425747971L;
    
    protected override Action<ISerializers> Register => RegisterDeclaredTypesSerializers;
    public static void RegisterDeclaredTypesSerializers(ISerializers serializers)
    {
      
      serializers.RegisterToplevelOnce(typeof(JetBrains.Rider.Model.IdeRoot), JetBrains.Rider.Model.IdeRoot.RegisterDeclaredTypesSerializers);
    }
    
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    public override void Print(PrettyPrinter printer)
    {
      printer.Println("RdProtocolModel (");
      using (printer.IndentCookie()) {
        printer.Print("property = "); _Property.PrintEx(printer); printer.Println();
        printer.Print("map = "); _Map.PrintEx(printer); printer.Println();
        printer.Print("call = "); _Call.PrintEx(printer); printer.Println();
        printer.Print("callback = "); _Callback.PrintEx(printer); printer.Println();
        printer.Print("sink = "); _Sink.PrintEx(printer); printer.Println();
        printer.Print("source = "); _Source.PrintEx(printer); printer.Println();
        printer.Print("signal = "); _Signal.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  public static class SolutionRdProtocolModelEx
   {
    public static RdProtocolModel GetRdProtocolModel(this JetBrains.Rider.Model.Solution solution)
    {
      return solution.GetOrCreateExtension("rdProtocolModel", () => new RdProtocolModel());
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdProtocolModel.kt:17</p>
  /// </summary>
  public sealed class CustomType : IPrintable, IEquatable<CustomType>
  {
    //fields
    //public fields
    [NotNull] public string String {get; private set;}
    public bool Boolean {get; private set;}
    [NotNull] public string[] Array {get; private set;}
    
    //private fields
    //primary constructor
    public CustomType(
      [NotNull] string @string,
      bool boolean,
      [NotNull] string[] array
    )
    {
      if (@string == null) throw new ArgumentNullException("string");
      if (array == null) throw new ArgumentNullException("array");
      
      String = @string;
      Boolean = boolean;
      Array = array;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string @string, out bool boolean, [NotNull] out string[] array)
    {
      @string = String;
      boolean = Boolean;
      array = Array;
    }
    //statics
    
    public static CtxReadDelegate<CustomType> Read = (ctx, reader) => 
    {
      var @string = reader.ReadString();
      var boolean = reader.ReadBool();
      var array = ReadStringArray(ctx, reader);
      var _result = new CustomType(@string, boolean, array);
      return _result;
    };
    public static CtxReadDelegate<string[]> ReadStringArray = JetBrains.Rd.Impl.Serializers.ReadString.Array();
    
    public static CtxWriteDelegate<CustomType> Write = (ctx, writer, value) => 
    {
      writer.Write(value.String);
      writer.Write(value.Boolean);
      WriteStringArray(ctx, writer, value.Array);
    };
    public static  CtxWriteDelegate<string[]> WriteStringArray = JetBrains.Rd.Impl.Serializers.WriteString.Array();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((CustomType) obj);
    }
    public bool Equals(CustomType other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return String == other.String && Boolean == other.Boolean && Array.SequenceEqual(other.Array);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + String.GetHashCode();
        hash = hash * 31 + Boolean.GetHashCode();
        hash = hash * 31 + Array.ContentHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("CustomType (");
      using (printer.IndentCookie()) {
        printer.Print("string = "); String.PrintEx(printer); printer.Println();
        printer.Print("boolean = "); Boolean.PrintEx(printer); printer.Println();
        printer.Print("array = "); Array.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
}
